#include "headers.h"

//========================
//  MirandaPluginInfo
//========================
PLUGININFOEX pluginInfo={
	sizeof(PLUGININFOEX),
	modFullname,
	PLUGIN_MAKE_VERSION(1,0,0,1),
	"History editor lets you view (and edit!) all your history easily.",
	"Originally written by Jonathan Gordon",
	"jdgordy@gmail.com",
	"© 2003-2008 Jonathan Gordon, Updated for Miranda 0.8 by Nightwish",
	"jdgordy.tk",		// www
	0,		//not transient
	0		//doesn't replace anything built-in
};
__declspec(dllexport) PLUGININFO* MirandaPluginInfoEx(DWORD mirandaVersion)
{
	if(mirandaVersion < PLUGIN_MAKE_VERSION(0, 8, 0, 0))
		return NULL;
	return &pluginInfo;
}

//========================
//  WINAPI DllMain
//========================

BOOL WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason,LPVOID lpvReserved)
{
	hInst=hinstDLL;
	return TRUE;
}

//===================
// MainInit
//===================

int MainInit(WPARAM wParam,LPARAM lParam)
{
	return 0;
}

static int HistoryEditorMenuCommand(WPARAM wParam,LPARAM lParam)
{
	if (!hwnd2mainWindow) // so only opens 1 at a time
		hwnd2mainWindow = CreateDialogParam(hInst,MAKEINTRESOURCE(IDD_MAIN),0,MainDlgProc,0);
	else SetForegroundWindow(hwnd2mainWindow);
	return 0;
}

static int HistoryEditorContactCommand(WPARAM wParam,LPARAM lParam)
{
	if (!hwnd2mainWindow) // so only opens 1 at a time
		hwnd2mainWindow = CreateDialogParam(hInst,MAKEINTRESOURCE(IDD_MAIN),0,MainDlgProc,wParam);
	else SetForegroundWindow(hwnd2mainWindow);
	return 0;
}

static int HistoryEditorCopyHistoryCommand(WPARAM wParam,LPARAM lParam)
{
	copyHistory((HANDLE)wParam, (HANDLE)lParam);
	return 0;
}
//===========================
// Load (hook ModulesLoaded)
//===========================
int __declspec(dllexport) Load(PLUGINLINK *link)
{ 	
	CLISTMENUITEM mi;
	
	#ifndef NDEBUG //mem leak detector :-) Thanks Tornado!
	int flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG); // Get current flag
	flag |= _CRTDBG_LEAK_CHECK_DF; // Turn on leak-checking bit
	_CrtSetDbgFlag(flag); // Set flag to the new value
	#endif

	pluginLink = link; 
	CreateServiceFunction("HistoryEditor/MenuCommand",HistoryEditorMenuCommand);
	CreateServiceFunction("HistoryEditor/CopyHistory",HistoryEditorCopyHistoryCommand);
	CreateServiceFunction("HistoryEditor/ContactMenuCommand",HistoryEditorContactCommand);
	ZeroMemory(&mi,sizeof(mi));
	mi.cbSize=sizeof(mi);
	mi.position=1900000001;
	mi.flags=0;
	mi.hIcon= LoadIcon(hInst,MAKEINTRESOURCE(IDI_HISTORY));
	mi.pszContactOwner=NULL;

	mi.pszName=modFullname;
	mi.pszService="HistoryEditor/MenuCommand";
	CallService(MS_CLIST_ADDMAINMENUITEM,0,(LPARAM)&mi);

	mi.pszName=Translate("View History with History Editor");
	mi.pszService="HistoryEditor/ContactMenuCommand";
	CallService(MS_CLIST_ADDCONTACTMENUITEM,0,(LPARAM)&mi);

	hwnd2mainWindow = 0;	
	{	// add our modules to the KnownModules list
		DBVARIANT dbv;
		if (DBGetContactSetting(NULL, "KnownModules", modFullname, &dbv)) 
			DBWriteContactSettingString(NULL, "KnownModules", modFullname,modname);
		DBFreeVariant(&dbv);
	}

	return 0; 
}

int __declspec(dllexport) Unload(void) 
{ 
	return 0;
} 
